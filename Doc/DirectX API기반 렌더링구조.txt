	
void GameEngineRenderingPipeLine::Rendering()
{
	// input어셈블러 단계
	std::vector<float4> CopyVertex;
	{
		CopyVertex = VertexBuffer_->GetVertexs();
	}

	{
		for (size_t i = 0; i < CopyVertex.size(); i++)
		{
			CopyVertex[i] = VertexShader_->VertexShaderFunction(CopyVertex[i]);
		}
	}

	std::vector<std::vector<float4>> TriVector;
	// 그린다.
	{
		const std::vector<int>& Index = IndexBuffer_->Indexs;


		// 삼각형은 점 3개로 그려지므로 3
		TriVector.resize(Index.size() / 3);

		// 삼각형의 갯수 Index.size() / 3
		for (size_t TriCount = 0; TriCount < Index.size() / 3; TriCount++)
		{
			TriVector[TriCount].resize(3);

			int CurIndex0 = Index[(TriCount * 3) + 0];
			int CurIndex1 = Index[(TriCount * 3) + 1];
			int CurIndex2 = Index[(TriCount * 3) + 2];

			TriVector[TriCount][0] = CopyVertex[CurIndex0];
			TriVector[TriCount][1] = CopyVertex[CurIndex1];
			TriVector[TriCount][2] = CopyVertex[CurIndex2];
		}
	}

	for (size_t Tri = 0; Tri < TriVector.size(); Tri++)
	{
		for (size_t i = 0; i < TriVector[Tri].size(); i++)
		{
			Rasterizer_->RasterizerUpdate(TriVector[Tri][i]);
		}
	}

	for (size_t Tri = 0; Tri < TriVector.size(); Tri++)
	{
		POINT ArrTri[3];

		ArrTri[0] = TriVector[Tri][0].GetWindowPoint();
		ArrTri[1] = TriVector[Tri][1].GetWindowPoint();
		ArrTri[2] = TriVector[Tri][2].GetWindowPoint();

		//이게 픽셀 쉐이더 단계라고 볼수있다.
		Polygon(GameEngineWindow::GetInst().GetWindowDC(), &ArrTri[0], 3);
	}
}