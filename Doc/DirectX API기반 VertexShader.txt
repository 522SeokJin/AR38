// 이 스택에서 곧바로 넣어주고 싶은건
// [] -> 람다함수
// 이름없는 함수를 즉석에서 만들어낼수있다.

GameEngineVertexShaderManager::GetInst().Create("TestShader", [](const float4& _Value)
	{
		// 1 0 0 0
		// 0 1 0 0
		// 0 0 1 0
		// 0 0 0 1

		//float4x4 ScaleMat;
		//ScaleMat.Scaling({ 20.0f, 20.0f, 20.0f });

		//float4x4 RotMat;
		//RotMat.RotationDeg({ 0.0f, 0.0f, 0.0f });

		//float4x4 PosMat;
		////PosMat.Translation({ 0.0f, 0.0f, 0.0f });
		//PosMat.Translation(BoxPos);

		//// 보는 사람이 없으면 안됨
		//float4x4 ViewMat;

		//ViewMat.ViewToLH({ 0.0f, 0.0f, -200.0f }, { 0.0f, 0.0f, 1.0f }, { 0.0f, 1.0f, 0.0f });

		//// 세계의 크기를 -1 1사이의 값으로 줄인다.
		//// X = -1~1;
		//// Y = -1~1;
		//// Z = 0~1;

		//// 보통 2가지 투영행렬이 있는데.
		//// 1. 원근감을 주는 투영행렬 원근투영
		//// 2. 주지 않는 투영행렬 직교투영

		//// -1~1로 들어가기 직전으로 바꾼다.

		//float4x4 PerspectiveMat;
		//PerspectiveMat.PerspectiveFovLH(60.0f, 1280.0f, 720.0f, 0.1f, 1000.0f);

		//float4x4 OrthographicMat;
		//OrthographicMat.OrthographicLH(1280.0f, 720.0f, 0.1f, 1000.0f);

		//// float4x4 ProjectionMat;

		//// 벡터란?
		//// 원점에서부터 시작하는 x y

		//// 행렬은 교환법칙이 성립하지 않는다.

		//// 순서를 지켜서 곱해야한다.
		//// 크자이공부
		//// 크기 자전 이동 공전 부모
		//// 뷰행렬 -> 공전행렬

		//float4x4 WorldMat = ScaleMat * RotMat * PosMat;
		//float4x4 WolrdView = WorldMat * ViewMat;

		//float4x4 WorldViewProjectionMat = WolrdView * PerspectiveMat;

		//float4x4 WorldViewOrthographicMat = WolrdView * OrthographicMat;

		//float4 PersPos = _Value;
		//PersPos *= WorldViewProjectionMat;
		//float4 OrthPos = _Value;
		//OrthPos *= WorldViewOrthographicMat;
				
		float4 PersPos = _Value;

		return PersPos;
	}
);